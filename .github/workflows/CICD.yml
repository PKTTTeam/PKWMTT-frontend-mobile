name: CICD

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Run unit tests
        run: npm test --if-present

  release-apk:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --include=dev

      - name: Create .env file
        run: |
          echo "API_URL=${{ secrets.API_URL }}" > .env
          echo "API_KEY=${{ secrets.API_KEY }}" >> .env

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Clean everything
        run: |
          rm -rf android/app/build
          rm -rf android/.cxx
          rm -rf node_modules/.cache
          cd android && ./gradlew clean

      
      - name: Generate Codegen artifacts
        run: |
          cd android
          ./gradlew generateCodegenArtifactsFromSchema || echo "Codegen task not available, proceeding with build"

      - name: Force autolinking regeneration
        run: |
          rm -rf android/app/build/generated/autolinking
          npx react-native config

      
      - name: Pre-build configuration
        run: |
          cd android
          ./gradlew :app:preBuild

      - name: Build release APK
        run: |
          cd android
          ./gradlew assembleRelease

      - name: Verify APK exists
        run: |
          echo "Checking APK files in build directory:"
          ls -la android/app/build/outputs/apk/release/
          APK_COUNT=$(find android/app/build/outputs/apk/release -name "PKWMTT-*-release.apk" | wc -l)
          echo "Found $APK_COUNT APK file(s) matching pattern"
          if [ $APK_COUNT -eq 0 ]; then
            echo "No APK files found!"
            exit 1
          fi

      - name: Upload APK to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: android/app/build/outputs/apk/release/PKWMTT-*-release.apk
          name: PKWMTT-${{ github.ref_name }}.apk

      - name: Upload APK to Backend Server
        run: |
          # Find the exact APK file
          APK_FILE=$(find android/app/build/outputs/apk/release -name "PKWMTT-*-release.apk" | head -1)
          
          if [ -z "$APK_FILE" ]; then
            echo "APK file not found!"
            exit 1
          fi
          
          echo "Uploading APK: $APK_FILE"
          echo "Using admin key: ${#secrets.ADMIN_KEY} characters"
          echo "Upload URL: ${{ secrets.UPLOAD_URL }}"
          
          # Upload with verbose output and error handling
          curl -v -X POST \
            -H "X-ADMIN-KEY: ${{ secrets.ADMIN_KEY }}" \
            -F "file=@$APK_FILE" \
            -F "tag=${{ github.ref_name }}" \
            -F "commit=${{ github.sha }}" \
            -w "HTTP Status: %{http_code}\n" \
            ${{ secrets.UPLOAD_URL }}
          
          # Check exit code
          if [ $? -eq 0 ]; then
            echo "Upload successful!"
          else
            echo "Upload failed!"
            exit 1
          fi
