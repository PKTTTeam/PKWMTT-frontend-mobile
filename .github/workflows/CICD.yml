name: CICD

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Run unit tests
        run: npm test --if-present

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --include=dev

      - name: Create .env file
        run: |
          echo "API_URL=${{ secrets.API_URL }}" > .env
          echo "API_KEY=${{ secrets.API_KEY }}" >> .env
          echo "VEXO_KEY=${{ secrets.VEXO_KEY }}" >> .env

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Clean everything
        run: |
          rm -rf android/app/build
          rm -rf android/.cxx
          rm -rf node_modules/.cache
          cd android && ./gradlew clean

      - name: Generate Codegen artifacts
        run: |
          cd android
          ./gradlew generateCodegenArtifactsFromSchema || echo "Codegen task not available, proceeding with build"

      - name: Force autolinking regeneration
        run: |
          rm -rf android/app/build/generated/autolinking
          npx react-native config

      - name: Pre-build configuration
        run: |
          cd android
          ./gradlew :app:preBuild

      - name: Decode keystore
        run: |
          echo "${{ secrets.PKWMAPP_UPLOAD_KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks

      - name: Build release APK and AAB
        run: |
          cd android
          ./gradlew assembleRelease bundleRelease
        env:
          UPLOAD_KEYSTORE_PATH: android/app/keystore.jks
          UPLOAD_KEY_ALIAS: ${{ secrets.UPLOAD_KEY_ALIAS }}
          UPLOAD_KEY_PASSWORD: ${{ secrets.UPLOAD_KEY_PASSWORD }}
          UPLOAD_STORE_PASSWORD: ${{ secrets.UPLOAD_STORE_PASSWORD }}

      - name: Verify APK exists
        run: |
          APK_DIR="android/app/build/outputs/apk/release"
          APK_FILE=$(find $APK_DIR -name "PKWMApp-*-release.apk" | head -1)
          echo "APK file: $APK_FILE"
          if [ -z "$APK_FILE" ]; then
            echo "No APK found!"
            exit 1
          fi

      - name: Upload APK to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: android/app/build/outputs/apk/release/PKWMApp-*-release.apk
          name: PKWMApp-${{ github.ref_name }}.apk

      - name: Upload APK to Backend Server
        run: |
          curl -v -X POST \
            -H "X-ADMIN-KEY: ${{ secrets.ADMIN_KEY }}" \
            -F "file=@$APK_FILE" \
            -w "HTTP Status: %{http_code}\n" \
            ${{ secrets.UPLOAD_URL }}
          if [ $? -eq 0 ]; then
            echo "Upload successful!"
          else
            echo "Upload failed!"
            exit 1
          fi

      - name: Verify AAB exists
        run: |
          BUNDLE_DIR="android/app/build/outputs/bundle/release"
          AAB_FILE=$(find $BUNDLE_DIR -name "PKWMApp-*-release.aab" | head -1)
          echo "AAB file: $AAB_FILE"
          if [ -z "$AAB_FILE" ]; then
            echo "No AAB found!"
            exit 1
          fi

      - name: Upload AAB to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          packageName: com.pkwmapp
          releaseFile: android/app/build/outputs/bundle/release/PKWMApp-*-release.aab
          releaseName: ${{ github.ref_name }}
          # whatsNewDirectory: android/app/release-notes
          track: internal
